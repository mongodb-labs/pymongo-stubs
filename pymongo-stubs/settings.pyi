import threading
from typing import Any, Dict, List, Optional, Tuple

from pymongo.monitor import Monitor
from pymongo.pool import Pool, PoolOptions
from pymongo.server_description import ServerDescription

class TopologySettings:
    def __init__(
        self,
        seeds: Optional[Any] = ...,
        replica_set_name: Optional[Any] = ...,
        pool_class: Optional[Any] = ...,
        pool_options: Optional[Any] = ...,
        monitor_class: Optional[Any] = ...,
        condition_class: Optional[Any] = ...,
        local_threshold_ms: Any = ...,
        server_selection_timeout: Any = ...,
        heartbeat_frequency: Any = ...,
        server_selector: Optional[Any] = ...,
        fqdn: Optional[Any] = ...,
        direct_connection: Optional[Any] = ...,
    ) -> None: ...
    @property
    def seeds(self) -> List[Tuple[str, int]]: ...
    @property
    def replica_set_name(self) -> str: ...
    @property
    def pool_class(self) -> Pool: ...
    @property
    def pool_options(self) -> PoolOptions: ...
    @property
    def monitor_class(self) -> Monitor: ...
    @property
    def condition_class(self) -> threading.Condition: ...
    @property
    def local_threshold_ms(self) -> int: ...
    @property
    def server_selection_timeout(self) -> int: ...
    @property
    def server_selector(self): ...
    @property
    def heartbeat_frequency(self) -> int: ...
    @property
    def fqdn(self): ...
    @property
    def direct(self) -> bool: ...
    def get_topology_type(self) -> int: ...
    def get_server_descriptions(self) -> Dict[Tuple[str, int], ServerDescription]: ...
