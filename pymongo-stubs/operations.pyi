from typing import Any, Dict, Mapping, Optional, Sequence, Tuple, Union

class InsertOne:
    def __init__(self, document: Mapping[str, Any]) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class DeleteOne:
    def __init__(self, filter: Any, collation: Optional[Any] = ..., hint: Optional[Any] = ...) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class DeleteMany:
    def __init__(self, filter: Any, collation: Optional[Any] = ..., hint: Optional[Any] = ...) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class ReplaceOne:
    def __init__(
        self, filter: Any, replacement: Any, upsert: bool = ..., collation: Optional[Any] = ..., hint: Optional[Any] = ...
    ) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class _UpdateOp:
    def __init__(self, filter: Any, doc: Any, upsert: Any, collation: Any, array_filters: Any, hint: Any) -> None: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class UpdateOne(_UpdateOp):
    def __init__(
        self,
        filter: Any,
        update: Any,
        upsert: bool = ...,
        collation: Optional[Any] = ...,
        array_filters: Optional[Any] = ...,
        hint: Optional[Any] = ...,
    ) -> None: ...

class UpdateMany(_UpdateOp):
    def __init__(
        self,
        filter: Any,
        update: Any,
        upsert: bool = ...,
        collation: Optional[Any] = ...,
        array_filters: Optional[Any] = ...,
        hint: Optional[Any] = ...,
    ) -> None: ...

class IndexModel:
    def __init__(self, keys: Union[str, Sequence[Tuple[str, Union[int, str]]]], **kwargs: Any) -> None: ...
    @property
    def document(self) -> Dict[str, Any]: ...
