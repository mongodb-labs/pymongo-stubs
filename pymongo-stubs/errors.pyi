from typing import Any, Dict, Iterable, Mapping, Optional

from bson.errors import BSONError, InvalidBSON, InvalidDocument, InvalidId, InvalidStringData

class CertificateError(ValueError): ...

class PyMongoError(Exception):
    def __init__(self, message: str = ..., error_labels: Optional[Iterable[str]] = ...) -> None: ...
    def has_error_label(self, label: str) -> bool: ...

class ProtocolError(PyMongoError): ...
class ConnectionFailure(PyMongoError): ...

class AutoReconnect(ConnectionFailure):
    errors: Any = ...
    def __init__(self, message: str = ..., errors: Any = ...) -> None: ...

class NetworkTimeout(AutoReconnect): ...

class NotMasterError(AutoReconnect):
    def __init__(self, message: str = ..., errors: Optional[Any] = ...) -> None: ...

class ServerSelectionTimeoutError(AutoReconnect): ...
class ConfigurationError(PyMongoError): ...

class OperationFailure(PyMongoError):
    def __init__(
        self, error: Any, code: Optional[Any] = ..., details: Optional[Any] = ..., max_wire_version: Optional[Any] = ...
    ) -> None: ...
    @property
    def code(self) -> int: ...
    @property
    def details(self) -> Dict[str, Any]: ...

class CursorNotFound(OperationFailure): ...
class ExecutionTimeout(OperationFailure): ...
class WriteConcernError(OperationFailure): ...
class WriteError(OperationFailure): ...
class WTimeoutError(WriteConcernError): ...
class DuplicateKeyError(WriteError): ...

class BulkWriteError(OperationFailure):
    def __init__(self, results: Mapping[str, Any]) -> None: ...

class InvalidOperation(PyMongoError): ...
class InvalidName(PyMongoError): ...
class CollectionInvalid(PyMongoError): ...
class InvalidURI(ConfigurationError): ...
class ExceededMaxWaiters(PyMongoError): ...
class DocumentTooLarge(InvalidDocument): ...

class EncryptionError(PyMongoError):
    def __init__(self, cause: Any) -> None: ...
    @property
    def cause(self): ...

class _OperationCancelled(AutoReconnect): ...
