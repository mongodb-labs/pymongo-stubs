from typing import Any, Dict, List, Mapping, Optional, Sequence, Union

class _ServerMode:
    def __init__(
        self, mode: Any, tag_sets: Optional[Any] = ..., max_staleness: int = ..., hedge: Optional[Any] = ...
    ) -> None: ...
    @property
    def name(self) -> str: ...
    @property
    def mongos_mode(self): ...
    @property
    def document(self) -> Dict[str, Union[str, List[Dict[str, Any]], int]]: ...
    @property
    def mode(self) -> int: ...
    @property
    def tag_sets(self) -> List[Dict[Any, Any]]: ...
    @property
    def max_staleness(self) -> int: ...
    @property
    def hedge(self): ...
    @property
    def min_wire_version(self) -> int: ...
    def __eq__(self, other: Any) -> Any: ...
    def __ne__(self, other: Any) -> Any: ...

class Primary(_ServerMode):
    def __init__(self) -> None: ...
    def __call__(self, selection: Any): ...
    def __eq__(self, other: Any) -> Any: ...

class PrimaryPreferred(_ServerMode):
    def __init__(self, tag_sets: Optional[Any] = ..., max_staleness: int = ..., hedge: Optional[Any] = ...) -> None: ...
    def __call__(self, selection: Any): ...

class Secondary(_ServerMode):
    def __init__(self, tag_sets: Optional[Any] = ..., max_staleness: int = ..., hedge: Optional[Any] = ...) -> None: ...
    def __call__(self, selection: Any): ...

class SecondaryPreferred(_ServerMode):
    def __init__(self, tag_sets: Optional[Any] = ..., max_staleness: int = ..., hedge: Optional[Any] = ...) -> None: ...
    def __call__(self, selection: Any): ...

class Nearest(_ServerMode):
    def __init__(self, tag_sets: Optional[Any] = ..., max_staleness: int = ..., hedge: Optional[Any] = ...) -> None: ...
    def __call__(self, selection: Any): ...

def make_read_preference(mode: int, tag_sets: Sequence[Mapping[str, Any]], max_staleness: int = ...) -> _ServerMode: ...

class ReadPreference:
    PRIMARY: Any = ...
    PRIMARY_PREFERRED: Any = ...
    SECONDARY: Any = ...
    SECONDARY_PREFERRED: Any = ...
    NEAREST: Any = ...

def read_pref_mode_from_name(name: str) -> int: ...

class MovingAverage:
    average: Any = ...
    def __init__(self) -> None: ...
    def add_sample(self, sample: int) -> None: ...
    def get(self) -> Optional[float]: ...
    def reset(self) -> None: ...
