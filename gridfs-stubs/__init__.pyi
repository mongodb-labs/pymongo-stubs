from typing import Any, Optional

from pymongo.client_session import ClientSession
from pymongo.common import UNAUTHORIZED_CODES as UNAUTHORIZED_CODES
from pymongo.database import Database
from pymongo.errors import OperationFailure as OperationFailure

class GridFS:
    def __init__(self, database: Database, collection: str = ..., disable_md5: bool = ...) -> None: ...
    def new_file(self, **kwargs: Any): ...
    def put(self, data: Any, **kwargs: Any): ...
    def get(self, file_id: Any, session: Optional[ClientSession] = ...): ...
    def get_version(
        self, filename: Optional[str] = ..., version: int = ..., session: Optional[ClientSession] = ..., **kwargs: Any
    ): ...
    def get_last_version(self, filename: Optional[str] = ..., session: Optional[ClientSession] = ..., **kwargs: Any): ...
    def delete(self, file_id: Any, session: Optional[ClientSession] = ...) -> None: ...
    def list(self, session: Optional[ClientSession] = ...): ...
    def find_one(self, filter: Optional[Any] = ..., session: Optional[ClientSession] = ..., *args: Any, **kwargs: Any): ...
    def find(self, *args: Any, **kwargs: Any): ...
    def exists(self, document_or_id: Optional[Any] = ..., session: Optional[ClientSession] = ..., **kwargs: Any): ...

class GridFSBucket:
    def __init__(
        self,
        db: Any,
        bucket_name: str = ...,
        chunk_size_bytes: Any = ...,
        write_concern: Optional[Any] = ...,
        read_preference: Optional[Any] = ...,
        disable_md5: bool = ...,
    ) -> None: ...
    def open_upload_stream(
        self,
        filename: str,
        chunk_size_bytes: Optional[Any] = ...,
        metadata: Optional[Any] = ...,
        session: Optional[ClientSession] = ...,
    ): ...
    def open_upload_stream_with_id(
        self,
        file_id: Any,
        filename: str,
        chunk_size_bytes: Optional[Any] = ...,
        metadata: Optional[Any] = ...,
        session: Optional[ClientSession] = ...,
    ): ...
    def upload_from_stream(
        self,
        filename: str,
        source: Any,
        chunk_size_bytes: Optional[Any] = ...,
        metadata: Optional[Any] = ...,
        session: Optional[ClientSession] = ...,
    ): ...
    def upload_from_stream_with_id(
        self,
        file_id: Any,
        filename: str,
        source: Any,
        chunk_size_bytes: Optional[Any] = ...,
        metadata: Optional[Any] = ...,
        session: Optional[ClientSession] = ...,
    ) -> None: ...
    def open_download_stream(self, file_id: Any, session: Optional[ClientSession] = ...): ...
    def download_to_stream(self, file_id: Any, destination: Any, session: Optional[ClientSession] = ...) -> None: ...
    def delete(self, file_id: Any, session: Optional[ClientSession] = ...) -> None: ...
    def find(self, *args: Any, **kwargs: Any): ...
    def open_download_stream_by_name(self, filename: str, revision: int = ..., session: Optional[ClientSession] = ...): ...
    def download_to_stream_by_name(
        self, filename: str, destination: Any, revision: int = ..., session: Optional[ClientSession] = ...
    ) -> None: ...
    def rename(self, file_id: Any, new_filename: str, session: Optional[ClientSession] = ...) -> None: ...
